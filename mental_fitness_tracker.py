# -*- coding: utf-8 -*-
"""Mental Fitness Tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T3lhjjrJw1cescj5ZMDyT97lvO5qmgjY

**Importing Libraries**
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

#Uploading the csv
# from google.colab import files
# data_to_load = files.upload()

"""**Reading Data**"""

df1 = pd.read_csv("mental-and-substance-use-as-share-of-disease.csv")
df2 = pd.read_csv("prevalence-by-mental-and-substance-use-disorder.csv")
#print(df1)
#print(df2)

df1.head()

df2.head()

"""**Merging Data**"""

data = pd.merge(df1,df2)
data.head()

"""**Data Cleaning**"""

data.isnull().sum()

data.drop('Code',axis=1,inplace=True)

data.head()

data.size

data.shape

data.set_axis(['Country','Year','Mental Fitness','Schizophrenia','Bipolar Disorder','Eating Disorder','Anxiety','Drug Usage','Depression','Alcohol'],axis='columns',inplace=True)

data.head()

"""**Data Visualisation**"""

plt.figure(figsize=(10,5))
sns.heatmap(data.corr(),annot=True,cmap='PuRd')
plt.show()

fig = px.pie(data,names='Year',values='Anxiety')
fig.show()

fig=px.bar(data.head(20),x='Year',y='Mental Fitness',color='Year')
fig.show()

sns.jointplot(data,x='Mental Fitness',y='Anxiety',kind='reg')
plt.show()

sns.pairplot(data,corner='True')
plt.show()

fig=px.line(data,x='Year',y='Mental Fitness',color='Country',markers=True,color_discrete_sequence=['pink','blue'],template='plotly_dark')
fig.show()

mean=data['Mental Fitness'].mean()
mean

data.info()

from sklearn.preprocessing import LabelEncoder
for i in data.columns:
  if data[i].dtype == 'object':
    data[i]=LabelEncoder().fit_transform(data[i])

x=data.drop('Mental Fitness',axis=1)
y=data['Mental Fitness']
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2)

"""**Linear Regression**"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score

lr = LinearRegression()
lr.fit(X_train,Y_train)

#Training Set
Y_train_pred = lr.predict(X_train)
mse = mean_squared_error(Y_train,Y_train_pred)
rmse = (np.sqrt(mean_squared_error(Y_train,Y_train_pred)))
r2 = r2_score(Y_train,Y_train_pred)

print("The model performance for training set")
print()
print('MSE is ',mse)
print('RMSE is ',rmse)
print('R2 Score is ',r2)

"""**Decision Tree Regressor**"""

from sklearn.tree import DecisionTreeRegressor
dtr = DecisionTreeRegressor()
dtr.fit(X_train,Y_train)

#Training Set
Y_train_pred = dtr.predict(X_train)
mse = mean_squared_error(Y_train,Y_train_pred)
rmse = (np.sqrt(mean_squared_error(Y_train,Y_train_pred)))
r2 = r2_score(Y_train,Y_train_pred)

print("The model performance for training set")
print()
print('MSE is ',mse)
print('RMSE is ',rmse)
print('R2 Score is ',r2)

"""**Evaluation**"""

#Testing Set for Linear Regression
Y_test_pred = lr.predict(X_test)
mse = mean_squared_error(Y_test,Y_test_pred)
rmse = (np.sqrt(mean_squared_error(Y_test,Y_test_pred)))
r2 = r2_score(Y_test,Y_test_pred)

print("Testing Set for Linear Regression")
print()
print('MSE is ',mse)
print('RMSE is ',rmse)
print('R2 Score is ',r2)
print()
print()

#Testing Set for Decision Tree Regressor
Y_test_pred = dtr.predict(X_test)
mse = mean_squared_error(Y_test,Y_test_pred)
rmse = (np.sqrt(mean_squared_error(Y_test,Y_test_pred)))
r2 = r2_score(Y_test,Y_test_pred)

print("Testing Set for Decision Tree Regressor")
print()
print('MSE is ',mse)
print('RMSE is ',rmse)
print('R2 Score is ',r2)

"""**Decision Tree Regressor** performs well in both Training and Testing data"""